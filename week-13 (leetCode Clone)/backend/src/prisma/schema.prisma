generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String
  image     String?
  role      UserRole @default(USER)
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems      Problem[]
  submission    Submission[]
  ProblemSolved ProblemSolved[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  example     Json
  constraints String
  hints       String?
  editorial   String?

  testCases         Json
  codeSnippets      Json
  referenceSolution Json

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission    Submission[]
  problemSolved ProblemSolved[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  language      String
  sourceCode    Json
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted, wrong answer
  memory        String?
  time          String?

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCasesResult[]
}

model TestCasesResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
